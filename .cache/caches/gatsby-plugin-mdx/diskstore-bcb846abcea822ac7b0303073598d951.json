{"expireTime":9007200865547473000,"key":"gatsby-plugin-mdx-entire-payload-d142f6348841049db81797a9d01a2f09-","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Sieve of Eratosthenes","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":24,"offset":24},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":26,"offset":26},"indent":[]}},{"type":"text","value":" is a simple and ancient algorithm to find thr prime number up to a given limit. This is one of the most efficient algorithm to find small prime numbers. This algorithm for collecting primes numbers is invented by Eratosthenes (276 - 194 BC).","position":{"start":{"line":2,"column":26,"offset":26},"end":{"line":2,"column":268,"offset":268},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":268,"offset":268},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Time Complexity","position":{"start":{"line":4,"column":3,"offset":272},"end":{"line":4,"column":18,"offset":287},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":270},"end":{"line":4,"column":20,"offset":289},"indent":[]}},{"type":"text","value":" of Sieve of Eratosthenes : O(n log(log n))","position":{"start":{"line":4,"column":20,"offset":289},"end":{"line":4,"column":63,"offset":332},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":270},"end":{"line":4,"column":63,"offset":332},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For the given value of n, the algorithm works iteratively making the multiples of primes as composite, starting from 2. Once all the multiple of 2 have been marked as composite, the multiple of the next prime, i.e 3 are marked composite. This process go on until","position":{"start":{"line":6,"column":1,"offset":334},"end":{"line":6,"column":263,"offset":596},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":334},"end":{"line":6,"column":263,"offset":596},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://user-images.githubusercontent.com/28982255/82886000-89298600-9f63-11ea-881d-8bf30b6c0eb7.png","alt":"955558e6ac3d6a1c1bc8d3c8b8534aca 1","position":{"start":{"line":8,"column":1,"offset":598},"end":{"line":8,"column":140,"offset":737},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":598},"end":{"line":8,"column":140,"offset":737},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"where p is a prime number.","position":{"start":{"line":11,"column":1,"offset":740},"end":{"line":11,"column":27,"offset":766},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":740},"end":{"line":11,"column":27,"offset":766},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Working of Sieve of Eratosthenes Algorithm","position":{"start":{"line":14,"column":5,"offset":773},"end":{"line":14,"column":47,"offset":815},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":769},"end":{"line":14,"column":47,"offset":815},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here in the algorithm, 0 is represent as a composite number.","position":{"start":{"line":16,"column":1,"offset":817},"end":{"line":16,"column":61,"offset":877},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":817},"end":{"line":16,"column":61,"offset":877},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"To find all the prime number up-to ","position":{"start":{"line":18,"column":3,"offset":881},"end":{"line":18,"column":38,"offset":916},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"n","position":{"start":{"line":18,"column":40,"offset":918},"end":{"line":18,"column":41,"offset":919},"indent":[]}}],"position":{"start":{"line":18,"column":38,"offset":916},"end":{"line":18,"column":43,"offset":921},"indent":[]}},{"type":"text","value":" , we have to generate a list of integers from ","position":{"start":{"line":18,"column":43,"offset":921},"end":{"line":18,"column":90,"offset":968},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"2 to n","position":{"start":{"line":18,"column":92,"offset":970},"end":{"line":18,"column":98,"offset":976},"indent":[]}}],"position":{"start":{"line":18,"column":90,"offset":968},"end":{"line":18,"column":100,"offset":978},"indent":[]}},{"type":"text","value":". ","position":{"start":{"line":18,"column":100,"offset":978},"end":{"line":18,"column":102,"offset":980},"indent":[]}},{"type":"linkReference","identifier":"because the first and smallest prime number is 2","label":"Because the first and smallest prime number is 2","referenceType":"shortcut","children":[{"type":"text","value":"Because the first and smallest prime number is 2","position":{"start":{"line":18,"column":103,"offset":981},"end":{"line":18,"column":151,"offset":1029},"indent":[]}}],"position":{"start":{"line":18,"column":102,"offset":980},"end":{"line":18,"column":152,"offset":1030},"indent":[]}}],"position":{"start":{"line":18,"column":3,"offset":881},"end":{"line":18,"column":152,"offset":1030},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":879},"end":{"line":18,"column":152,"offset":1030},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Initially, let p equal 2, the first prime number.","position":{"start":{"line":19,"column":3,"offset":1033},"end":{"line":19,"column":52,"offset":1082},"indent":[]}}],"position":{"start":{"line":19,"column":3,"offset":1033},"end":{"line":19,"column":52,"offset":1082},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":1031},"end":{"line":19,"column":52,"offset":1082},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Now we have to mark all the multiple of p which are less than n as composite, i.e replacing the number in the generated list with 0 ","position":{"start":{"line":20,"column":3,"offset":1085},"end":{"line":20,"column":135,"offset":1217},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"except p itself","position":{"start":{"line":20,"column":137,"offset":1219},"end":{"line":20,"column":152,"offset":1234},"indent":[]}}],"position":{"start":{"line":20,"column":135,"offset":1217},"end":{"line":20,"column":154,"offset":1236},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":20,"column":154,"offset":1236},"end":{"line":20,"column":155,"offset":1237},"indent":[]}}],"position":{"start":{"line":20,"column":3,"offset":1085},"end":{"line":20,"column":155,"offset":1237},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":1083},"end":{"line":20,"column":155,"offset":1237},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Assign the value of p to the next prime number.","position":{"start":{"line":21,"column":3,"offset":1240},"end":{"line":21,"column":50,"offset":1287},"indent":[]}}],"position":{"start":{"line":21,"column":3,"offset":1240},"end":{"line":21,"column":50,"offset":1287},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":1238},"end":{"line":21,"column":50,"offset":1287},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Repeat the process until ","position":{"start":{"line":22,"column":3,"offset":1290},"end":{"line":22,"column":28,"offset":1315},"indent":[]}}],"position":{"start":{"line":22,"column":3,"offset":1290},"end":{"line":22,"column":28,"offset":1315},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":1288},"end":{"line":22,"column":28,"offset":1315},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":879},"end":{"line":22,"column":28,"offset":1315},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://user-images.githubusercontent.com/28982255/82886000-89298600-9f63-11ea-881d-8bf30b6c0eb7.png","alt":"955558e6ac3d6a1c1bc8d3c8b8534aca 1","position":{"start":{"line":24,"column":1,"offset":1317},"end":{"line":24,"column":140,"offset":1456},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":1317},"end":{"line":24,"column":140,"offset":1456},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When the algorithm terminates, all the numbers in the list that are not marked are prime.","position":{"start":{"line":27,"column":1,"offset":1459},"end":{"line":27,"column":90,"offset":1548},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":1459},"end":{"line":27,"column":90,"offset":1548},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://user-images.githubusercontent.com/28982255/82891130-deb56100-9f6a-11ea-8743-09d63deb4765.gif","alt":"soe1","position":{"start":{"line":29,"column":1,"offset":1550},"end":{"line":29,"column":110,"offset":1659},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":1550},"end":{"line":29,"column":110,"offset":1659},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Implementation with an Example","position":{"start":{"line":32,"column":5,"offset":1666},"end":{"line":32,"column":35,"offset":1696},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":1662},"end":{"line":32,"column":35,"offset":1696},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Problem :  Generate all the primes less than 11","position":{"start":{"line":34,"column":1,"offset":1698},"end":{"line":34,"column":48,"offset":1745},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":1698},"end":{"line":34,"column":48,"offset":1745},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Solution : ","position":{"start":{"line":36,"column":1,"offset":1747},"end":{"line":36,"column":12,"offset":1758},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":1747},"end":{"line":36,"column":12,"offset":1758},"indent":[]}},{"type":"code","lang":"python","meta":null,"value":"import math\nn = 200 # n is any arbitrary integer\nList = []\nfor x in range(2, n): # add numbers from 2 to n - 1 to List\n    List.append(x)\n# note the above statement is equivalent to List = range(2, n)\np = 2 # p is a prime\nwhile not int(math.sqrt(p)) + 1 > n: # continue to mark out primes until square root of p is less than n\n    for x in range(p * 2, n, p): # remove all the multiples of p\n        List[x - 2] = 0\n    p += 1\n    while p - 2 < len(List) and List[p - 2] == 0: # assign p to the next prime. Next prime is the next non zero number in the list\n        p += 1\nfor x in List: # search for non zero or prime numbers in the list and print them\n    if x != 0:\n        print (x)","position":{"start":{"line":38,"column":1,"offset":1760},"end":{"line":55,"column":4,"offset":2461},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Live Code","position":{"start":{"line":59,"column":5,"offset":2469},"end":{"line":59,"column":14,"offset":2478},"indent":[]}}],"position":{"start":{"line":59,"column":1,"offset":2465},"end":{"line":59,"column":14,"offset":2478},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Try the above code","position":{"start":{"line":61,"column":1,"offset":2480},"end":{"line":61,"column":19,"offset":2498},"indent":[]}}],"position":{"start":{"line":61,"column":1,"offset":2480},"end":{"line":61,"column":19,"offset":2498},"indent":[]}},{"type":"jsx","value":"<iframe height=\"500px\" width=\"100%\" src=\"https://repl.it/@ayanbag/seive?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>","position":{"start":{"line":64,"column":1,"offset":2501},"end":{"line":64,"column":272,"offset":2772},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Sieve of Eratosthenes Algorithm - the ancient algorithm\",\"date\":\"2020-05-26T00:00:00.000Z\",\"tags\":[\"Algorithms\"]}","position":{"start":{"line":78,"column":1,"offset":2786},"end":{"line":78,"column":152,"offset":2937},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":78,"column":152,"offset":2937}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Sieve of Eratosthenes Algorithm - the ancient algorithm\",\n  \"date\": \"2020-05-26T00:00:00.000Z\",\n  \"tags\": [\"Algorithms\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Sieve of Eratosthenes\"), \" is a simple and ancient algorithm to find thr prime number up to a given limit. This is one of the most efficient algorithm to find small prime numbers. This algorithm for collecting primes numbers is invented by Eratosthenes (276 - 194 BC).\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Time Complexity\"), \" of Sieve of Eratosthenes : O(n log(log n))\"), mdx(\"p\", null, \"For the given value of n, the algorithm works iteratively making the multiples of primes as composite, starting from 2. Once all the multiple of 2 have been marked as composite, the multiple of the next prime, i.e 3 are marked composite. This process go on until\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://user-images.githubusercontent.com/28982255/82886000-89298600-9f63-11ea-881d-8bf30b6c0eb7.png\",\n    \"alt\": \"955558e6ac3d6a1c1bc8d3c8b8534aca 1\"\n  }))), mdx(\"p\", null, \"where p is a prime number.\"), mdx(\"h3\", null, \"Working of Sieve of Eratosthenes Algorithm\"), mdx(\"p\", null, \"Here in the algorithm, 0 is represent as a composite number.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To find all the prime number up-to \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"n\"), \" , we have to generate a list of integers from \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"2 to n\"), \". \", \"[Because the first and smallest prime number is 2]\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Initially, let p equal 2, the first prime number.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Now we have to mark all the multiple of p which are less than n as composite, i.e replacing the number in the generated list with 0 \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"except p itself\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Assign the value of p to the next prime number.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Repeat the process until \")), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://user-images.githubusercontent.com/28982255/82886000-89298600-9f63-11ea-881d-8bf30b6c0eb7.png\",\n    \"alt\": \"955558e6ac3d6a1c1bc8d3c8b8534aca 1\"\n  }))), mdx(\"p\", null, \"When the algorithm terminates, all the numbers in the list that are not marked are prime.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://user-images.githubusercontent.com/28982255/82891130-deb56100-9f6a-11ea-8743-09d63deb4765.gif\",\n    \"alt\": \"soe1\"\n  }))), mdx(\"h3\", null, \"Implementation with an Example\"), mdx(\"p\", null, \"Problem :  Generate all the primes less than 11\"), mdx(\"p\", null, \"Solution : \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"import math\\nn = 200 # n is any arbitrary integer\\nList = []\\nfor x in range(2, n): # add numbers from 2 to n - 1 to List\\n    List.append(x)\\n# note the above statement is equivalent to List = range(2, n)\\np = 2 # p is a prime\\nwhile not int(math.sqrt(p)) + 1 > n: # continue to mark out primes until square root of p is less than n\\n    for x in range(p * 2, n, p): # remove all the multiples of p\\n        List[x - 2] = 0\\n    p += 1\\n    while p - 2 < len(List) and List[p - 2] == 0: # assign p to the next prime. Next prime is the next non zero number in the list\\n        p += 1\\nfor x in List: # search for non zero or prime numbers in the list and print them\\n    if x != 0:\\n        print (x)\\n\")), mdx(\"h3\", null, \"Live Code\"), mdx(\"p\", null, \"Try the above code\"), mdx(\"iframe\", {\n    height: \"500px\",\n    width: \"100%\",\n    src: \"https://repl.it/@ayanbag/seive?lite=true\",\n    scrolling: \"no\",\n    frameBorder: \"no\",\n    allowtransparency: \"true\",\n    allowFullScreen: \"true\",\n    sandbox: \"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Sieve of Eratosthenes Algorithm - the ancient algorithm\",\n  \"date\": \"2020-05-26T00:00:00.000Z\",\n  \"tags\": [\"Algorithms\"]\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p><strong parentName=\"p\">{`Sieve of Eratosthenes`}</strong>{` is a simple and ancient algorithm to find thr prime number up to a given limit. This is one of the most efficient algorithm to find small prime numbers. This algorithm for collecting primes numbers is invented by Eratosthenes (276 - 194 BC).`}</p>\n    <p><strong parentName=\"p\">{`Time Complexity`}</strong>{` of Sieve of Eratosthenes : O(n log(log n))`}</p>\n    <p>{`For the given value of n, the algorithm works iteratively making the multiples of primes as composite, starting from 2. Once all the multiple of 2 have been marked as composite, the multiple of the next prime, i.e 3 are marked composite. This process go on until`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"https://user-images.githubusercontent.com/28982255/82886000-89298600-9f63-11ea-881d-8bf30b6c0eb7.png\",\n        \"alt\": \"955558e6ac3d6a1c1bc8d3c8b8534aca 1\"\n      }}></img></p>\n    <p>{`where p is a prime number.`}</p>\n    <h3>{`Working of Sieve of Eratosthenes Algorithm`}</h3>\n    <p>{`Here in the algorithm, 0 is represent as a composite number.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`To find all the prime number up-to `}<strong parentName=\"li\">{`n`}</strong>{` , we have to generate a list of integers from `}<strong parentName=\"li\">{`2 to n`}</strong>{`. `}{`[Because the first and smallest prime number is 2]`}</li>\n      <li parentName=\"ul\">{`Initially, let p equal 2, the first prime number.`}</li>\n      <li parentName=\"ul\">{`Now we have to mark all the multiple of p which are less than n as composite, i.e replacing the number in the generated list with 0 `}<strong parentName=\"li\">{`except p itself`}</strong>{`.`}</li>\n      <li parentName=\"ul\">{`Assign the value of p to the next prime number.`}</li>\n      <li parentName=\"ul\">{`Repeat the process until `}</li>\n    </ul>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"https://user-images.githubusercontent.com/28982255/82886000-89298600-9f63-11ea-881d-8bf30b6c0eb7.png\",\n        \"alt\": \"955558e6ac3d6a1c1bc8d3c8b8534aca 1\"\n      }}></img></p>\n    <p>{`When the algorithm terminates, all the numbers in the list that are not marked are prime.`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"https://user-images.githubusercontent.com/28982255/82891130-deb56100-9f6a-11ea-8743-09d63deb4765.gif\",\n        \"alt\": \"soe1\"\n      }}></img></p>\n    <h3>{`Implementation with an Example`}</h3>\n    <p>{`Problem :  Generate all the primes less than 11`}</p>\n    <p>{`Solution : `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`import math\nn = 200 # n is any arbitrary integer\nList = []\nfor x in range(2, n): # add numbers from 2 to n - 1 to List\n    List.append(x)\n# note the above statement is equivalent to List = range(2, n)\np = 2 # p is a prime\nwhile not int(math.sqrt(p)) + 1 > n: # continue to mark out primes until square root of p is less than n\n    for x in range(p * 2, n, p): # remove all the multiples of p\n        List[x - 2] = 0\n    p += 1\n    while p - 2 < len(List) and List[p - 2] == 0: # assign p to the next prime. Next prime is the next non zero number in the list\n        p += 1\nfor x in List: # search for non zero or prime numbers in the list and print them\n    if x != 0:\n        print (x)\n`}</code></pre>\n    <h3>{`Live Code`}</h3>\n    <p>{`Try the above code`}</p>\n    <iframe height=\"500px\" width=\"100%\" src=\"https://repl.it/@ayanbag/seive?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}