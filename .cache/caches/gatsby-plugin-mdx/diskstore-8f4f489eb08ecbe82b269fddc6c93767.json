{"expireTime":9007200865547473000,"key":"gatsby-plugin-mdx-entire-payload-c398cc9133c2e559fc7ba94514595e44-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":3,"children":[{"type":"text","value":"What is Loop in Linked List ?","position":{"start":{"line":2,"column":5,"offset":5},"end":{"line":2,"column":34,"offset":34},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":34,"offset":34},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Generally, the last node of a Linked List points to ","position":{"start":{"line":4,"column":1,"offset":36},"end":{"line":4,"column":53,"offset":88},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"null","position":{"start":{"line":4,"column":55,"offset":90},"end":{"line":4,"column":59,"offset":94},"indent":[]}}],"position":{"start":{"line":4,"column":53,"offset":88},"end":{"line":4,"column":61,"offset":96},"indent":[]}},{"type":"text","value":", which indicates that it is end of the list. But when there is a loop in a Linked List , the last node points to some of the interval node or first node or itself. In this case with we traverse a Linked List node one by one, our traversal will never end as it is in loop","position":{"start":{"line":4,"column":61,"offset":96},"end":{"line":4,"column":332,"offset":367},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":36},"end":{"line":4,"column":332,"offset":367},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://user-images.githubusercontent.com/28982255/82292403-7a255f80-99c8-11ea-805c-2279f6544dd6.png","alt":"Loop in Linked List","position":{"start":{"line":6,"column":1,"offset":369},"end":{"line":6,"column":125,"offset":493},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":369},"end":{"line":6,"column":125,"offset":493},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Detection of Loop in Linked List","position":{"start":{"line":9,"column":5,"offset":500},"end":{"line":9,"column":37,"offset":532},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":496},"end":{"line":9,"column":37,"offset":532},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"There are many ways for detecting any cycle in linked list, ","position":{"start":{"line":11,"column":1,"offset":534},"end":{"line":11,"column":61,"offset":594},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Floyd Cycle Detection Algorithm","position":{"start":{"line":11,"column":63,"offset":596},"end":{"line":11,"column":94,"offset":627},"indent":[]}}],"position":{"start":{"line":11,"column":61,"offset":594},"end":{"line":11,"column":96,"offset":629},"indent":[]}},{"type":"text","value":" works better than other in terms of Time Complexity and Space Complexity. It is a pointer algorithm which uses only two pointers, which moves through the sequence. It is also called \"tortoise and the hare algorithm\".","position":{"start":{"line":11,"column":96,"offset":629},"end":{"line":11,"column":313,"offset":846},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":534},"end":{"line":11,"column":313,"offset":846},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Space Complexity of Floyd Cycle Detection Algorithm :","position":{"start":{"line":13,"column":5,"offset":852},"end":{"line":13,"column":58,"offset":905},"indent":[]}}],"position":{"start":{"line":13,"column":3,"offset":850},"end":{"line":13,"column":60,"offset":907},"indent":[]}},{"type":"text","value":" O(1)","position":{"start":{"line":13,"column":60,"offset":907},"end":{"line":13,"column":65,"offset":912},"indent":[]}}],"position":{"start":{"line":13,"column":3,"offset":850},"end":{"line":13,"column":65,"offset":912},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":848},"end":{"line":13,"column":65,"offset":912},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Time Complexity of Floyd Cycle Detection Algorithm :","position":{"start":{"line":14,"column":5,"offset":917},"end":{"line":14,"column":57,"offset":969},"indent":[]}}],"position":{"start":{"line":14,"column":3,"offset":915},"end":{"line":14,"column":59,"offset":971},"indent":[]}},{"type":"text","value":" O(n)","position":{"start":{"line":14,"column":59,"offset":971},"end":{"line":14,"column":64,"offset":976},"indent":[]}}],"position":{"start":{"line":14,"column":3,"offset":915},"end":{"line":14,"column":64,"offset":976},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":913},"end":{"line":14,"column":64,"offset":976},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":848},"end":{"line":14,"column":64,"offset":976},"indent":[1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Working of Floyd Cycle Detection Algorithm and its Mathematical Proof","position":{"start":{"line":16,"column":5,"offset":982},"end":{"line":16,"column":74,"offset":1051},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":978},"end":{"line":16,"column":74,"offset":1051},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The logic of this algorithm can be illustrated as a race between a hare and a tortoise. Hare is always faster than a tortoise and it will always win the race against tortoise unless their is a cycle in the race track. If it exists in the race track, race will continue forever and hare will see tortoise again and again.","position":{"start":{"line":18,"column":1,"offset":1053},"end":{"line":18,"column":321,"offset":1373},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1053},"end":{"line":18,"column":321,"offset":1373},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Lets understand with the help of experiment :","position":{"start":{"line":20,"column":1,"offset":1375},"end":{"line":20,"column":46,"offset":1420},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":1375},"end":{"line":20,"column":46,"offset":1420},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://user-images.githubusercontent.com/28982255/82298242-76e2a180-99d1-11ea-9dae-33449dcbbe0e.png","alt":"identify-start-node-of-loop-in-circular- linked-list 1","position":{"start":{"line":22,"column":1,"offset":1422},"end":{"line":22,"column":160,"offset":1581},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":1422},"end":{"line":22,"column":160,"offset":1581},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Assuming the distance between the beginning node or head node of Linked List and starting node of the loop is ","position":{"start":{"line":25,"column":3,"offset":1586},"end":{"line":25,"column":113,"offset":1696},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"a","position":{"start":{"line":25,"column":115,"offset":1698},"end":{"line":25,"column":116,"offset":1699},"indent":[]}}],"position":{"start":{"line":25,"column":113,"offset":1696},"end":{"line":25,"column":118,"offset":1701},"indent":[]}}],"position":{"start":{"line":25,"column":3,"offset":1586},"end":{"line":25,"column":118,"offset":1701},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":1584},"end":{"line":25,"column":118,"offset":1701},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Assuming the distance between the starting node of the loop and meeting node of ","position":{"start":{"line":26,"column":3,"offset":1704},"end":{"line":26,"column":83,"offset":1784},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"hare","position":{"start":{"line":26,"column":84,"offset":1785},"end":{"line":26,"column":88,"offset":1789},"indent":[]}}],"position":{"start":{"line":26,"column":83,"offset":1784},"end":{"line":26,"column":89,"offset":1790},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":26,"column":89,"offset":1790},"end":{"line":26,"column":94,"offset":1795},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"tortoise","position":{"start":{"line":26,"column":95,"offset":1796},"end":{"line":26,"column":103,"offset":1804},"indent":[]}}],"position":{"start":{"line":26,"column":94,"offset":1795},"end":{"line":26,"column":104,"offset":1805},"indent":[]}},{"type":"text","value":" is ","position":{"start":{"line":26,"column":104,"offset":1805},"end":{"line":26,"column":108,"offset":1809},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"b","position":{"start":{"line":26,"column":110,"offset":1811},"end":{"line":26,"column":111,"offset":1812},"indent":[]}}],"position":{"start":{"line":26,"column":108,"offset":1809},"end":{"line":26,"column":113,"offset":1814},"indent":[]}}],"position":{"start":{"line":26,"column":3,"offset":1704},"end":{"line":26,"column":113,"offset":1814},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":1702},"end":{"line":26,"column":113,"offset":1814},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Assuming the distance between the meeting node of ","position":{"start":{"line":27,"column":3,"offset":1817},"end":{"line":27,"column":53,"offset":1867},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"hare","position":{"start":{"line":27,"column":54,"offset":1868},"end":{"line":27,"column":58,"offset":1872},"indent":[]}}],"position":{"start":{"line":27,"column":53,"offset":1867},"end":{"line":27,"column":59,"offset":1873},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":27,"column":59,"offset":1873},"end":{"line":27,"column":64,"offset":1878},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"tortoise","position":{"start":{"line":27,"column":65,"offset":1879},"end":{"line":27,"column":73,"offset":1887},"indent":[]}}],"position":{"start":{"line":27,"column":64,"offset":1878},"end":{"line":27,"column":74,"offset":1888},"indent":[]}},{"type":"text","value":" and starting node  of the loop is ","position":{"start":{"line":27,"column":74,"offset":1888},"end":{"line":27,"column":109,"offset":1923},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"c","position":{"start":{"line":27,"column":111,"offset":1925},"end":{"line":27,"column":112,"offset":1926},"indent":[]}}],"position":{"start":{"line":27,"column":109,"offset":1923},"end":{"line":27,"column":114,"offset":1928},"indent":[]}}],"position":{"start":{"line":27,"column":3,"offset":1817},"end":{"line":27,"column":114,"offset":1928},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":1815},"end":{"line":27,"column":114,"offset":1928},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":1584},"end":{"line":27,"column":114,"offset":1928},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Tortoise moves one node at a time and the hare moves two node at same time. So, we can say when the tortoise has moved distance ","position":{"start":{"line":29,"column":1,"offset":1930},"end":{"line":29,"column":129,"offset":2058},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"d","position":{"start":{"line":29,"column":131,"offset":2060},"end":{"line":29,"column":132,"offset":2061},"indent":[]}}],"position":{"start":{"line":29,"column":129,"offset":2058},"end":{"line":29,"column":134,"offset":2063},"indent":[]}},{"type":"text","value":" , then turtle has moved pointer ","position":{"start":{"line":29,"column":134,"offset":2063},"end":{"line":29,"column":167,"offset":2096},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"2d","position":{"start":{"line":29,"column":169,"offset":2098},"end":{"line":29,"column":171,"offset":2100},"indent":[]}}],"position":{"start":{"line":29,"column":167,"offset":2096},"end":{"line":29,"column":173,"offset":2102},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":29,"column":173,"offset":2102},"end":{"line":29,"column":174,"offset":2103},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":1930},"end":{"line":29,"column":174,"offset":2103},"indent":[]}},{"type":"code","lang":"latex","meta":null,"value":"So the length of the loop is b+c\n\nWhen both tortoise and hare meets, tortoise covers a distance d = a+b and\nhare covers a distace 2d = (a+b+c+b)\n\nTherefore,\n2*d = (a+b+c+b)\nd = (a+b)\n\nNow,\n=> 2*d = 2*(a+b)\n=> 2*(a+b) = (a+b+c+b)\n=> 2*a + 2*b = a+2*b+c\n=> a=c\n\nIt means distance from head node to the start of loop node is same as distance between meeting point of the tortoise and hare to the starting node of loop","position":{"start":{"line":31,"column":1,"offset":2105},"end":{"line":48,"column":4,"offset":2532},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"So this shows after getting meeting point, if one pointer is placed at the beginning of the list, then moving both pointer one node at a time then they will meet at the start of loop.","position":{"start":{"line":50,"column":1,"offset":2534},"end":{"line":50,"column":184,"offset":2717},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":2534},"end":{"line":50,"column":184,"offset":2717},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Implementation of Floyd Cycle Detection Algorithm","position":{"start":{"line":54,"column":5,"offset":2725},"end":{"line":54,"column":54,"offset":2774},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":2721},"end":{"line":54,"column":54,"offset":2774},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Implementation in ","position":{"start":{"line":56,"column":1,"offset":2776},"end":{"line":56,"column":19,"offset":2794},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Python","position":{"start":{"line":56,"column":21,"offset":2796},"end":{"line":56,"column":27,"offset":2802},"indent":[]}}],"position":{"start":{"line":56,"column":19,"offset":2794},"end":{"line":56,"column":29,"offset":2804},"indent":[]}},{"type":"text","value":"  ","position":{"start":{"line":56,"column":29,"offset":2804},"end":{"line":56,"column":31,"offset":2806},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":2776},"end":{"line":56,"column":31,"offset":2806},"indent":[]}},{"type":"code","lang":"python","meta":null,"value":"\n# Node class\nclass Node:\n    # Constructor to initialize the node object\n    def __init__(self, data):\n        self.data = data\n        self.next = None\nclass LinkedList:\n    # Function to initialize head\n    def __init__(self):\n        self.head = None\n    # Function to insert a new node at the beginning\n    def push(self, new_data):\n        new_node = Node(new_data)\n        new_node.next = self.head\n        self.head = new_node\n    # Utility function to print it the linked LinkedList\n    def printList(self):\n        temp = self.head\n        while(temp):\n            print (temp.data,)\n            temp = temp.next\n    def detectLoop(self):\n        slow_p = self.head\n        fast_p = self.head\n        while(slow_p and fast_p and fast_p.next):\n            slow_p = slow_p.next\n            fast_p = fast_p.next.next\n            if slow_p == fast_p:\n                print (\"Found Loop\")\n                return\n# Driver program for testing\nllist = LinkedList()\nllist.push(20)\nllist.push(4)\nllist.push(15)\nllist.push(10)\n# Create a loop for testing\nllist.head.next.next.next.next = llist.head\nllist.detectLoop()","position":{"start":{"line":58,"column":1,"offset":2808},"end":{"line":99,"column":4,"offset":3938},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Output :","position":{"start":{"line":100,"column":1,"offset":3939},"end":{"line":100,"column":9,"offset":3947},"indent":[]}}],"position":{"start":{"line":100,"column":1,"offset":3939},"end":{"line":100,"column":9,"offset":3947},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"Found Loop","position":{"start":{"line":101,"column":1,"offset":3948},"end":{"line":103,"column":4,"offset":3966},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Live Code","position":{"start":{"line":109,"column":5,"offset":3976},"end":{"line":109,"column":14,"offset":3985},"indent":[]}}],"position":{"start":{"line":109,"column":1,"offset":3972},"end":{"line":109,"column":15,"offset":3986},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Try the above code","position":{"start":{"line":111,"column":1,"offset":3988},"end":{"line":111,"column":19,"offset":4006},"indent":[]}}],"position":{"start":{"line":111,"column":1,"offset":3988},"end":{"line":111,"column":19,"offset":4006},"indent":[]}},{"type":"jsx","value":"<iframe height=\"500px\" width=\"100%\" src=\"https://repl.it/@ayanbag/floyd-cycle-detection?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>","position":{"start":{"line":113,"column":1,"offset":4008},"end":{"line":113,"column":288,"offset":4295},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Floyd Cycle Detection Algorithm\",\"date\":\"2020-05-19T00:00:00.000Z\",\"tags\":[\"Algorithms\"]}","position":{"start":{"line":117,"column":1,"offset":4299},"end":{"line":117,"column":128,"offset":4426},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":117,"column":128,"offset":4426}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Floyd Cycle Detection Algorithm\",\n  \"date\": \"2020-05-19T00:00:00.000Z\",\n  \"tags\": [\"Algorithms\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"What is Loop in Linked List ?\"), mdx(\"p\", null, \"Generally, the last node of a Linked List points to \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"null\"), \", which indicates that it is end of the list. But when there is a loop in a Linked List , the last node points to some of the interval node or first node or itself. In this case with we traverse a Linked List node one by one, our traversal will never end as it is in loop\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://user-images.githubusercontent.com/28982255/82292403-7a255f80-99c8-11ea-805c-2279f6544dd6.png\",\n    \"alt\": \"Loop in Linked List\"\n  }))), mdx(\"h3\", null, \"Detection of Loop in Linked List\"), mdx(\"p\", null, \"There are many ways for detecting any cycle in linked list, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Floyd Cycle Detection Algorithm\"), \" works better than other in terms of Time Complexity and Space Complexity. It is a pointer algorithm which uses only two pointers, which moves through the sequence. It is also called \\\"tortoise and the hare algorithm\\\".\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Space Complexity of Floyd Cycle Detection Algorithm :\"), \" O(1)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Time Complexity of Floyd Cycle Detection Algorithm :\"), \" O(n)\")), mdx(\"h3\", null, \"Working of Floyd Cycle Detection Algorithm and its Mathematical Proof\"), mdx(\"p\", null, \"The logic of this algorithm can be illustrated as a race between a hare and a tortoise. Hare is always faster than a tortoise and it will always win the race against tortoise unless their is a cycle in the race track. If it exists in the race track, race will continue forever and hare will see tortoise again and again.\"), mdx(\"p\", null, \"Lets understand with the help of experiment :\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://user-images.githubusercontent.com/28982255/82298242-76e2a180-99d1-11ea-9dae-33449dcbbe0e.png\",\n    \"alt\": \"identify-start-node-of-loop-in-circular- linked-list 1\"\n  }))), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Assuming the distance between the beginning node or head node of Linked List and starting node of the loop is \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"a\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Assuming the distance between the starting node of the loop and meeting node of \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"hare\"), \" and \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"tortoise\"), \" is \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"b\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Assuming the distance between the meeting node of \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"hare\"), \" and \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"tortoise\"), \" and starting node  of the loop is \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"c\"))), mdx(\"p\", null, \"Tortoise moves one node at a time and the hare moves two node at same time. So, we can say when the tortoise has moved distance \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"d\"), \" , then turtle has moved pointer \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"2d\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-latex\"\n  }), \"So the length of the loop is b+c\\n\\nWhen both tortoise and hare meets, tortoise covers a distance d = a+b and\\nhare covers a distace 2d = (a+b+c+b)\\n\\nTherefore,\\n2*d = (a+b+c+b)\\nd = (a+b)\\n\\nNow,\\n=> 2*d = 2*(a+b)\\n=> 2*(a+b) = (a+b+c+b)\\n=> 2*a + 2*b = a+2*b+c\\n=> a=c\\n\\nIt means distance from head node to the start of loop node is same as distance between meeting point of the tortoise and hare to the starting node of loop\\n\")), mdx(\"p\", null, \"So this shows after getting meeting point, if one pointer is placed at the beginning of the list, then moving both pointer one node at a time then they will meet at the start of loop.\"), mdx(\"h3\", null, \"Implementation of Floyd Cycle Detection Algorithm\"), mdx(\"p\", null, \"Implementation in \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Python\"), \"  \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"\\n# Node class\\nclass Node:\\n    # Constructor to initialize the node object\\n    def __init__(self, data):\\n        self.data = data\\n        self.next = None\\nclass LinkedList:\\n    # Function to initialize head\\n    def __init__(self):\\n        self.head = None\\n    # Function to insert a new node at the beginning\\n    def push(self, new_data):\\n        new_node = Node(new_data)\\n        new_node.next = self.head\\n        self.head = new_node\\n    # Utility function to print it the linked LinkedList\\n    def printList(self):\\n        temp = self.head\\n        while(temp):\\n            print (temp.data,)\\n            temp = temp.next\\n    def detectLoop(self):\\n        slow_p = self.head\\n        fast_p = self.head\\n        while(slow_p and fast_p and fast_p.next):\\n            slow_p = slow_p.next\\n            fast_p = fast_p.next.next\\n            if slow_p == fast_p:\\n                print (\\\"Found Loop\\\")\\n                return\\n# Driver program for testing\\nllist = LinkedList()\\nllist.push(20)\\nllist.push(4)\\nllist.push(15)\\nllist.push(10)\\n# Create a loop for testing\\nllist.head.next.next.next.next = llist.head\\nllist.detectLoop()\\n\")), mdx(\"p\", null, \"Output :\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"Found Loop\\n\")), mdx(\"h3\", null, \"Live Code\"), mdx(\"p\", null, \"Try the above code\"), mdx(\"iframe\", {\n    height: \"500px\",\n    width: \"100%\",\n    src: \"https://repl.it/@ayanbag/floyd-cycle-detection?lite=true\",\n    scrolling: \"no\",\n    frameBorder: \"no\",\n    allowtransparency: \"true\",\n    allowFullScreen: \"true\",\n    sandbox: \"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Floyd Cycle Detection Algorithm\",\n  \"date\": \"2020-05-19T00:00:00.000Z\",\n  \"tags\": [\"Algorithms\"]\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h3>{`What is Loop in Linked List ?`}</h3>\n    <p>{`Generally, the last node of a Linked List points to `}<strong parentName=\"p\">{`null`}</strong>{`, which indicates that it is end of the list. But when there is a loop in a Linked List , the last node points to some of the interval node or first node or itself. In this case with we traverse a Linked List node one by one, our traversal will never end as it is in loop`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"https://user-images.githubusercontent.com/28982255/82292403-7a255f80-99c8-11ea-805c-2279f6544dd6.png\",\n        \"alt\": \"Loop in Linked List\"\n      }}></img></p>\n    <h3>{`Detection of Loop in Linked List`}</h3>\n    <p>{`There are many ways for detecting any cycle in linked list, `}<strong parentName=\"p\">{`Floyd Cycle Detection Algorithm`}</strong>{` works better than other in terms of Time Complexity and Space Complexity. It is a pointer algorithm which uses only two pointers, which moves through the sequence. It is also called \"tortoise and the hare algorithm\".`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Space Complexity of Floyd Cycle Detection Algorithm :`}</strong>{` O(1)`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Time Complexity of Floyd Cycle Detection Algorithm :`}</strong>{` O(n)`}</li>\n    </ul>\n    <h3>{`Working of Floyd Cycle Detection Algorithm and its Mathematical Proof`}</h3>\n    <p>{`The logic of this algorithm can be illustrated as a race between a hare and a tortoise. Hare is always faster than a tortoise and it will always win the race against tortoise unless their is a cycle in the race track. If it exists in the race track, race will continue forever and hare will see tortoise again and again.`}</p>\n    <p>{`Lets understand with the help of experiment :`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"https://user-images.githubusercontent.com/28982255/82298242-76e2a180-99d1-11ea-9dae-33449dcbbe0e.png\",\n        \"alt\": \"identify-start-node-of-loop-in-circular- linked-list 1\"\n      }}></img></p>\n    <ul>\n      <li parentName=\"ul\">{`Assuming the distance between the beginning node or head node of Linked List and starting node of the loop is `}<strong parentName=\"li\">{`a`}</strong></li>\n      <li parentName=\"ul\">{`Assuming the distance between the starting node of the loop and meeting node of `}<em parentName=\"li\">{`hare`}</em>{` and `}<em parentName=\"li\">{`tortoise`}</em>{` is `}<strong parentName=\"li\">{`b`}</strong></li>\n      <li parentName=\"ul\">{`Assuming the distance between the meeting node of `}<em parentName=\"li\">{`hare`}</em>{` and `}<em parentName=\"li\">{`tortoise`}</em>{` and starting node  of the loop is `}<strong parentName=\"li\">{`c`}</strong></li>\n    </ul>\n    <p>{`Tortoise moves one node at a time and the hare moves two node at same time. So, we can say when the tortoise has moved distance `}<strong parentName=\"p\">{`d`}</strong>{` , then turtle has moved pointer `}<strong parentName=\"p\">{`2d`}</strong>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-latex\"\n      }}>{`So the length of the loop is b+c\n\nWhen both tortoise and hare meets, tortoise covers a distance d = a+b and\nhare covers a distace 2d = (a+b+c+b)\n\nTherefore,\n2*d = (a+b+c+b)\nd = (a+b)\n\nNow,\n=> 2*d = 2*(a+b)\n=> 2*(a+b) = (a+b+c+b)\n=> 2*a + 2*b = a+2*b+c\n=> a=c\n\nIt means distance from head node to the start of loop node is same as distance between meeting point of the tortoise and hare to the starting node of loop\n`}</code></pre>\n    <p>{`So this shows after getting meeting point, if one pointer is placed at the beginning of the list, then moving both pointer one node at a time then they will meet at the start of loop.`}</p>\n    <h3>{`Implementation of Floyd Cycle Detection Algorithm`}</h3>\n    <p>{`Implementation in `}<strong parentName=\"p\">{`Python`}</strong>{`  `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`\n# Node class\nclass Node:\n    # Constructor to initialize the node object\n    def __init__(self, data):\n        self.data = data\n        self.next = None\nclass LinkedList:\n    # Function to initialize head\n    def __init__(self):\n        self.head = None\n    # Function to insert a new node at the beginning\n    def push(self, new_data):\n        new_node = Node(new_data)\n        new_node.next = self.head\n        self.head = new_node\n    # Utility function to print it the linked LinkedList\n    def printList(self):\n        temp = self.head\n        while(temp):\n            print (temp.data,)\n            temp = temp.next\n    def detectLoop(self):\n        slow_p = self.head\n        fast_p = self.head\n        while(slow_p and fast_p and fast_p.next):\n            slow_p = slow_p.next\n            fast_p = fast_p.next.next\n            if slow_p == fast_p:\n                print (\"Found Loop\")\n                return\n# Driver program for testing\nllist = LinkedList()\nllist.push(20)\nllist.push(4)\nllist.push(15)\nllist.push(10)\n# Create a loop for testing\nllist.head.next.next.next.next = llist.head\nllist.detectLoop()\n`}</code></pre>\n    <p>{`Output :`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`Found Loop\n`}</code></pre>\n    <h3>{`Live Code`}</h3>\n    <p>{`Try the above code`}</p>\n    <iframe height=\"500px\" width=\"100%\" src=\"https://repl.it/@ayanbag/floyd-cycle-detection?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}