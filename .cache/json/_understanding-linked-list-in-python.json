{"data":{"post":{"__typename":"MdxPost","slug":"/understanding-linked-list-in-python","title":"Understanding Linked List in Python","date":"26.04.2020","tags":[{"name":"Python","slug":"python"},{"name":"Data-Structure","slug":"data-structure"}],"description":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Understanding Linked List in Python\",\n  \"date\": \"2020-04-26T00:00:00.000Z\",\n  \"tags\": [\"Python\", \"Data-Structure\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Linked List\"), \" is a list of elements (containing data) in which the elements are linked together. In other words, it is an ordered collection of elements. It differ from the list in the way we store elements. Unlike list, Linked List doesn't store its elements at contiguous memory locations.\\nIn Linked List, each link contains a connection to another link. Linked List is the second most-used data structure after array.\"), mdx(\"h3\", null, \"Important Concepts to understand Linked List :\"), mdx(\"p\", null, \"Each elements of a Linked List is called a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"node\"), \" , and every node has two different parts :\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Data\"), \" : It contains the value to be stored in the node.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Next\"), \" : It is the reference to the next node in the list.\")), mdx(\"p\", null, \"Typical Node structure :\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://user-images.githubusercontent.com/28982255/80274780-7caed500-86fa-11ea-947a-949467143f1b.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"A linked list is composed of many nodes. The first node is always refers as \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"head\"), \" and its used as the starting point for any iteration through the list. The last node must have \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"next\"), \" reference pointing to \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"None\"), \" to determine the end of the list. \"), mdx(\"p\", null, \"Linked List representation :\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://user-images.githubusercontent.com/28982255/80275244-aa494d80-86fd-11ea-8a1a-a6738b6bee23.png\",\n    \"alt\": null\n  }))), mdx(\"h3\", null, \"Practical Application of Linked List in Computer Science:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Implementation of \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Stacks\"), \" and \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Queues\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Implementation of \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Graphs\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Dynamic Memory Allocation\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Performing arithmetic operations on long integers\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Manipulation of Polynomials by storing constants in the node of Linked List\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Representing Parse Matrix\")), mdx(\"h3\", null, \"Practical Application of Linked List in Real World:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Image Viewer\"), \" : Previous and Next Images are linked , hence can be accessed by next and previous button\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Music Player\"), \" \\u2013 Songs in music player are linked to previous and next song. you can play songs either from starting or ending of the list.\")), mdx(\"h2\", null, \"Implementing Linked List in Python\"), mdx(\"p\", null, \"Now its the time to implement some Linked List in Python\"), mdx(\"h3\", null, \"How to Create a Linked List ?\"), mdx(\"p\", null, \"A linked list is created by using node. Firstly, we create a node object and create an another class to use this node object. We will pass appropriate values through node object to point the next data elements. \"), mdx(\"p\", null, \"In the following program, we will create a linked list with four data elements :\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"class Node:\\n    def __init__(self, dataval=None):\\n        self.dataval = dataval\\n        self.nextval = None\\n\\nclass CLinkedList:\\n    def __init__(self):\\n        self.headval = None\\n\\nlt = CLinkedList()\\nlt.headval = Node(\\\"A\\\")\\ne2 = Node(\\\"B\\\")\\ne3 = Node(\\\"C\\\")\\ne4 = Node(\\\"D\\\")\\n\\n# Link first Node to second node\\nlt.headval.nextval = e2\\n\\n# Link second Node to third node\\ne2.nextval = e3\\n\\n# Link third Node to fourth node\\ne3.nextval = e4\\n\")), mdx(\"h3\", null, \"How to Traverse a Linked List ?\"), mdx(\"p\", null, \"Traversing a linked list means going through every single node of Linked List from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"head\"), \" of the Linked List to the node which has \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"next\"), \" value pointing to None. Singly linked list can traversed in forward direction only starting from the first element.\"), mdx(\"p\", null, \"In the following program, we will print the the value of next data element by assigning the pointer of the next node to current data element :\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"class Node:\\n    def __init__(self, dataval=None):\\n        self.dataval = dataval\\n        self.nextval = None\\n\\nclass CLinkedList:\\n    def __init__(self):\\n        self.headval = None\\n\\n    def listprint(self):\\n        printval = self.headval\\n        while printval is not None:\\n            print (printval.dataval)\\n            printval = printval.nextval\\n\\nlt= CLinkedList()\\nlt.headval = Node(\\\"A\\\")\\ne2 = Node(\\\"B\\\")\\ne3 = Node(\\\"C\\\")\\ne4 = Node(\\\"D\\\")\\n\\n# Link first Node to second node\\nlt.headval.nextval = e2\\n\\n# Link second Node to third node\\ne2.nextval = e3\\n\\n# Link third Node to fourth node\\ne3.nextval = e4\\n\\nlt.listprint()\\n\")), mdx(\"p\", null, \"The output of the above code :\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"A\\nB\\nC\\nD\\n\")), mdx(\"h3\", null, \"How to insert a New Node ?\"), mdx(\"p\", null, \"Depending upon the location where you want to insert an item , there are different ways to insert item in the linked list. \"), mdx(\"h4\", null, \"Inserting at the beginning of the Linked List :\"), mdx(\"p\", null, \"This involves pointing the next node of next data to the current head of the Linked List. As a result, the current head of the linked list will become the second data element and the new node becomes the head of the linked list.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"class Node:\\n    def __init__(self, dataval=None):\\n        self.dataval = dataval\\n        self.nextval = None\\n\\nclass CLinkedList:\\n    def __init__(self):\\n        self.headval = None\\n\\n# Print the linked list\\n    def listprint(self):\\n        printval = self.headval\\n        while printval is not None:\\n            print (printval.dataval)\\n            printval = printval.nextval\\n    def AtBegining(self,newdata):\\n        NewNode = Node(newdata)\\n        # Update the new nodes next val to existing node\\n        NewNode.nextval = self.headval\\n        self.headval = NewNode\\n\\nlt = CLinkedList()\\nlt.headval = Node(\\\"A\\\")\\ne2 = Node(\\\"B\\\")\\ne3 = Node(\\\"C\\\")\\n\\nlt.headval.nextval = e2\\ne2.nextval = e3\\n\\nlt.AtBegining(\\\"Z\\\")\\n\\nlt.listprint()\\n\")), mdx(\"p\", null, \"The output of the above code :\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"Z\\nA\\nB\\nC\\n\")), mdx(\"h4\", null, \"Inserting at the end of Linked List :\"), mdx(\"p\", null, \"This involves pointing the next pointer of the current last node of the linked list to the new data. As a result, the current last node of the linked list becomes the second last node of the linked list and the new data node becomes the last node of the current linked list.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"class Node:\\n    def __init__(self, dataval=None):\\n        self.dataval = dataval\\n        self.nextval = None\\n\\nclass CLinkedList:\\n    def __init__(self):\\n        self.headval = None\\n\\n# Function to add newnode\\n    def AtEnd(self, newdata):\\n        NewNode = Node(newdata)\\n        if self.headval is None:\\n            self.headval = NewNode\\n            return\\n        laste = self.headval\\n        while(laste.nextval):\\n            laste = laste.nextval\\n        laste.nextval=NewNode\\n\\n# Print the linked list\\n    def listprint(self):\\n        printval = self.headval\\n        while printval is not None:\\n            print (printval.dataval)\\n            printval = printval.nextval\\n\\n\\nlt = CLinkedList()\\nlt.headval = Node(\\\"A\\\")\\ne2 = Node(\\\"B\\\")\\ne3 = Node(\\\"C\\\")\\n\\nlt.headval.nextval = e2\\ne2.nextval = e3\\n\\nlt.AtEnd(\\\"Z\\\")\\n\\nlt.listprint()\\n\")), mdx(\"p\", null, \"The output of the above code :\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"A\\nB\\nC\\nZ\\n\")), mdx(\"h4\", null, \"Inserting in between two Data Nodes :\"), mdx(\"p\", null, \"This involves pointing the next pointer of the specific node to the new node. \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"class Node:\\n    def __init__(self, dataval=None):\\n        self.dataval = dataval\\n        self.nextval = None\\n\\nclass CLinkedList:\\n    def __init__(self):\\n        self.headval = None\\n\\n# Function to add node\\n    def Inbetween(self,middle_node,newdata):\\n        if middle_node is None:\\n            print(\\\"The mentioned node is absent\\\")\\n            return\\n\\n        NewNode = Node(newdata)\\n        NewNode.nextval = middle_node.nextval\\n        middle_node.nextval = NewNode\\n\\n# Print the linked list\\n    def listprint(self):\\n        printval = self.headval\\n        while printval is not None:\\n            print (printval.dataval)\\n            printval = printval.nextval\\n\\n\\nlt = CLinkedList()\\nlt.headval = Node(\\\"A\\\")\\ne2 = Node(\\\"B\\\")\\ne3 = Node(\\\"C\\\")\\n\\nlt.headval.nextval = e2\\ne2.nextval = e3\\n\\nlt.Inbetween(lt.headval.nextval,\\\"Z\\\")\\n\\nlt.listprint()\\n\")), mdx(\"p\", null, \"The output of the above code :\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"A\\nB\\nZ\\nC\\n\")), mdx(\"h3\", null, \"Removing  a Node from Linked List :\"), mdx(\"p\", null, \"To remove a node from the Linked List , we need to traverse the the list until we find our target node. Then we will link the pointer of the previous node of the target node to the next node of the target node.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"class Node:\\n    def __init__(self, data=None):\\n        self.data = data\\n        self.next = None\\n\\nclass CLinkedList:\\n    def __init__(self):\\n        self.head = None\\n\\n    def Atbegining(self, data_in):\\n        NewNode = Node(data_in)\\n        NewNode.next = self.head\\n        self.head = NewNode\\n        \\n# Function to remove node\\n    def RemoveNode(self, Removekey):\\n\\n        HeadVal = self.head\\n\\n        if (HeadVal is not None):\\n            if (HeadVal.data == Removekey):\\n                self.head = HeadVal.next\\n                HeadVal = None\\n                return\\n\\n        while (HeadVal is not None):\\n            if HeadVal.data == Removekey:\\n                break\\n            prev = HeadVal\\n            HeadVal = HeadVal.next\\n\\n        if (HeadVal == None):\\n            return\\n\\n        prev.next = HeadVal.next\\n\\n        HeadVal = None\\n\\n    def LListprint(self):\\n        printval = self.head\\n        while (printval):\\n            print(printval.data),\\n            printval = printval.next\\n\\n\\nllist = CLinkedList()\\nllist.Atbegining(\\\"A\\\")\\nllist.Atbegining(\\\"B\\\")\\nllist.Atbegining(\\\"C\\\")\\nllist.Atbegining(\\\"D\\\")\\nllist.RemoveNode(\\\"B\\\")\\nllist.LListprint()\\n\")), mdx(\"p\", null, \"When the above code is executed, it produces the following result:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"A\\nC\\nD\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Linked List  is a list of elements (containing data) in which the elements are linked together. In other words, it is an ordered collection…","timeToRead":2,"banner":null}},"pageContext":{"slug":"/understanding-linked-list-in-python","formatString":"DD.MM.YYYY"}}