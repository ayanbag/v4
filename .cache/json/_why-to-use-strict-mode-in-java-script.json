{"data":{"post":{"__typename":"MdxPost","slug":"/why-to-use-strict-mode-in-java-script","title":"Why to use Strict Mode in JavaScript ?","date":"20.04.2020","tags":[{"name":"JavaScript","slug":"java-script"}],"description":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Why to use Strict Mode in JavaScript ?\",\n  \"date\": \"2020-04-20T00:00:00.000Z\",\n  \"tags\": [\"JavaScript\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"JavaScript \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"strict mode\"), \" is a new feature in ECMAScript 5 that enables us to code a program, or a method in a \\\"strict\\\" operating context. It means, the errors which are being ignored by the compiler, will throw an exception message. It is a way to opt into a restricted version of JavaScript i.e implicitly opting-out of \\\"sloppy mode\\\".\"), mdx(\"p\", null, \"For example, in non-strict mode if you initialize a variable without declaring it using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"var\"), \" keyword (e.g. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"x = 6;\"), \"),  JavaScript interpreter will assume that you were referring to a global variable and if no such variable existed, it will automatically create one.\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Why Enable JavaScript Strict Mode ?\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"It makes easier to write \\\"Secure\\\" JavaScript Code.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"It restrict the features that are unclear or poorly thought out.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"It eliminates some \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"JavaScript Silent Errors\"), \" by changing them to throw errors.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"It fixes mistake that make it difficult for JavaScript engines to perform optimization.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"It prohibits the use of potential reserved words which are likely to be defined in the future version of ECMAScript.\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Invoking JavaScript Strict Mode\"), mdx(\"p\", null, \"Strict Mode can be invoked / enabled by two different ways  by using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"use strict\"), \":\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"can be defined in the global scope for the entire script\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"can be defined in individual function\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"'use strict'; //....To invoke Strict Mode\\n\\n//.....Some JS Code\\n\\n\")), mdx(\"p\", null, \"OR\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"(function() {\\n  'use strict'; //....To invoke Strict Mode\\n\\n  // ...your code...\\n})()\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"NOTE\"), \" : Ensure that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"'use strict';\"), \" is at the top of the whole script or at the beginning of the function. Otherwise Strict mode may not be enabled. Only Comments appear before \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"'use strict';\"), \" .\"), mdx(\"hr\", null), mdx(\"h2\", null, \"JavaScript Strict Mode Support\"), mdx(\"p\", null, \"Every modern browser such as chrome, Firefox, opera, etc. and node supports and has supported strict mode for years. It is very safe feature to use. If the browser does not support strict mode the expression is simply ignored. It is just a string followed by a semi-colon, a perfectly legal JavaScript statement.\"), mdx(\"hr\", null), mdx(\"h2\", null, \"General Restriction of Strict Mode\"), mdx(\"p\", null, \"Strict Mode changes both syntax and runtime behavior. The following general restriction will be enforced if we enable Strict mode :\"), mdx(\"h3\", null, \"Undeclared Variable are Not Allowed\"), mdx(\"p\", null, \"In strict mode, all variable should be declared. If you assign a undeclared variable it will throw a ReferenceError.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"\\\"use strict\\\";\\n\\nfunction strict() {\\n    msg = \\\"Hello World!\\\"; // ReferenceError: msg is not defined\\n    return msg;\\n}\\nconsole.log(strict());\\n\")), mdx(\"h3\", null, \"Deleting a function or variable is not allowed\"), mdx(\"p\", null, \"In Strict Mode, if you try to delete a variable or a function, a syntax error will be thrown.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"\\\"use strict\\\";\\n\\nvar per = {name: \\\"John\\\", age: 78};\\ndelete per; // SyntaxError\\n\")), mdx(\"p\", null, \"Similarly, when you try to delete a function in strict mode you will get an syntax error:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"\\\"use strict\\\";\\n\\nfunction sub(a, b) {\\n    return a - b;\\n}\\ndelete sum; // SyntaxError\\n\\n\")), mdx(\"h3\", null, \"Duplicating a parameter is not allowed\"), mdx(\"p\", null, \"In strict mode, if a function declaration has two or more parameters with same name, a syntax error will be thrown.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"\\\"use strict\\\";\\n\\nfunction square(a, a) { // SyntaxError\\n    return a * a;\\n}\\nconsole.log(square(2, 2));\\n\\n\")), mdx(\"h3\", null, \"The eval and arguments cannot be used as Identifiers\"), mdx(\"p\", null, \"In strict mode, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"eval\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arguments\"), \" are treated like keywords , so it cannot be used as a variable names, function names and or as parameter names.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"\\\"use strict\\\";\\n\\nvar eval = 10; // SyntaxError\\nconsole.log(eval);\\n\")), mdx(\"h3\", null, \"\\\"with\\\" statement is not allowed\"), mdx(\"p\", null, \"In strict mode, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"with\"), \" statement is not allowed. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"with\"), \" statement adds the properties and methods of the object to the current scope. So, the statements nested inside the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"with\"), \" statement can call the properties and methods of the object directly without referring it.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"\\\"use strict\\\";\\n\\nvar radius = 2;\\nwith(Math) { // SyntaxError\\n    var area = PI * radius * radius;\\n} \\n\")), mdx(\"h3\", null, \"Octal Literals and Escaped Characters Not Allowed\"), mdx(\"p\", null, \"In strict mode, octal numbers (numbers prefixed with a zero e.g. 010, 0377) are not allowed, though it is supported by all modern browser in non-strict mode. \"), mdx(\"p\", null, \"Strict mode forces you to be more explicit with this declaration by requiring a leading 0o in front of the octal value.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"\\\"use strict\\\";\\n\\nvar r = 010;     // SyntaxError\\nvar s = \\\"\\\\010\\\"   // SyntaxError\\nconsole.log(parseInt(r));\\n\")), mdx(\"h3\", null, \"The eval Method Cannot Alter Scope\"), mdx(\"p\", null, \"For security reason, code passed to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"eval()\"), \" cannot declare/modify variables or define function in surrounding scope.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"\\\"use strict\\\";\\n\\neval(\\\"var x = 5;\\\");\\nconsole.log(x); // ReferenceError: x is not defined\\n\")), mdx(\"h3\", null, \"Can't Write to Read-Only Properties\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"\\\"use strict\\\"; \\nvar objX = {}, \\nobjY = {get x() {return 0} };\\n\\nObject.defineProperty(objX, \\\"x\\\", {\\n  value:0, writable:false\\n});\\n\\nobjX.x = 3.14; // This will cause an error\\n\\nobjY.x = 3.14; // This will cause an error\\n\")), mdx(\"h3\", null, \"Future Keywords cannot be used in Strict Mode\"), mdx(\"p\", null, \"As per the latest ECMAScript 6 (or ES6) standards, these keywords are reserved keywords when they are found in strict mode code: \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"await\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"implements\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"interface\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"package\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"private\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"protected\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"public\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"static\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"let\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"yield\"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"\\\"use strict\\\";\\nvar let = 1500;      // This will cause an error \\n\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Wrapping Script Mode\"), mdx(\"p\", null, \"Strict mode is a way to ensure your code is clean and free from common syntax errors. By using Strict Mode in JavaScript, you will able to find and fix common coding mistakes and\\ntypos.\"), mdx(\"hr\", null), mdx(\"h2\", null, \"References:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://es5.github.io/\"\n  }), \"ECMAScript 5\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\"\n  }), \"Mozilla\"))));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"JavaScript  strict mode  is a new feature in ECMAScript 5 that enables us to code a program, or a method in a \"strict\" operating context. It…","timeToRead":2,"banner":null}},"pageContext":{"slug":"/why-to-use-strict-mode-in-java-script","formatString":"DD.MM.YYYY"}}